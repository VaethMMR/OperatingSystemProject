#include <usloss.h>
#include <phase1.h>
#include <phase2.h>
#include <phase3.h>
#include <stdlib.h> /* needed for atoi() */

semaphore 	running;

static int	ClockDriver(char *);
static int	DiskDriver(char *);

procStruct ProcTable[MAXPROC];
semaphore SemTable[MAXSEMS];	

void
start3(void)
{
    char	name[128];
    char        termbuf[10];
    int		i;
    int		clockPID;
    int		pid;
    int		status;
	
    /*
     * Check kernel mode here.
     */
	 checkKernel("start3");
	 
	/*
     * Data structure initialization as needed...
     */
    for(i = 0; i < MAXPROC; i++){
        clearProc(i);
        ProcTable[i].mboxID = MboxCreate(0, 0);
    }
	
	for(i = 0; i < MAXSEMS; i++){
        clearSem(i);
    }

    /*
     * Create clock device driver 
     * I am assuming a semaphore here for coordination.  A mailbox can
     * be used instead -- your choice.
     */
    running = semcreateReal(0);
    clockPID = fork1("Clock driver", ClockDriver, NULL, USLOSS_MIN_STACK, 2);
    if (clockPID < 0) {
	USLOSS_Console("start3(): Can't create clock driver\n");
	USLOSS_Halt(1);
    }
    /*
     * Wait for the clock driver to start. The idea is that ClockDriver
     * will V the semaphore "running" once it is running.
     */

    sempReal(running);

    /*
     * Create the disk device drivers here.  You may need to increase
     * the stack size depending on the complexity of your
     * driver, and perhaps do something with the pid returned.
     */

    for (i = 0; i < USLOSS_DISK_UNITS; i++) {
        sprintf(buf, "%d", i);
        pid = fork1(name, DiskDriver, buf, USLOSS_MIN_STACK, 2);
        if (pid < 0) {
            USLOSS_Console("start3(): Can't create term driver %d\n", i);
            USLOSS_Halt(1);
        }
    }

    // May be other stuff to do here before going on to terminal drivers

    /*
     * Create terminal device drivers.
     */


    /*
     * Create first user-level process and wait for it to finish.
     * These are lower-case because they are not system calls;
     * system calls cannot be invoked from kernel mode.
     * I'm assuming kernel-mode versions of the system calls
     * with lower-case first letters, as shown in provided_prototypes.h
     */
    pid = spawnReal("start4", start4, NULL, 4 * USLOSS_MIN_STACK, 3);
    pid = waitReal(&status);

    /*
     * Zap the device drivers
     */
    zap(clockPID);  // clock driver

    // eventually, at the end:
    quit(0);
    
}

static int
ClockDriver(char *arg)
{
    int result;
    int status;

    // Let the parent know we are running and enable interrupts.
    semvReal(running);
    USLOSS_PsrSet(USLOSS_PsrGet() | USLOSS_PSR_CURRENT_INT);

    // Infinite loop until we are zap'd
    while(! isZapped()) {
	result = waitdevice(USLOSS_CLOCK_DEV, 0, &status);
	if (result != 0) {
	    return 0;
	}
	/*
	 * Compute the current time and wake up any processes
	 * whose time has come.
	 */
    }
}

static int
DiskDriver(char *arg)
{
	
    return 0;
}

/*********		CLOCK DRIVER FUNCTIONS		*********/
/*
 *  Routine:  sleepReal
 *
 *  Description: Causes the calling process to become unrunnable 
 *				 for at least the specified number ofseconds, and 
 *				 not significantly longer. The seconds must be non-negative.
 *
 *  Arguments: seconds -- the amount of seconds for the calling process to be unrunnable
 *
 *  Return: -1 if the seconds are negative, 0 if otherwise
 *  side effect: none
*/
int sleepReal(int seconds){
	if(seconds < 0){
		return -1;
	}
	return 0;
}
/*********		CLOCK DRIVER FUNCTIONS		*********/


/*********		DISK DRIVER FUNCTIONS		*********/
/*
 *  Routine:  diskReadReal
 *
 *  Description: reads sectors from the disk indicated by the unit and starts
 *				 at track and the first sector.  The driver must handle a range
 *				 of sectors specified by first and sectors that spans a track
 *				 boundary.  A file cannot wrap around the end of the disk.
 *
 *  Arguments: unit -- disk that is indicated
 *			   track -- track on the disk
 *			   first -- the first sector of the disk
 *			   sectors -- number of sectors
 *			   buffer -- to be read into
 *
 *  Return: -1 if there are invalid parameters, 0 if sectors read successfully, >0 status register
 *  side effect: none
*/
int diskReadReal(int unit, int track, int first, int sectors, void* buffer){
	
	if(sectors < first)
		return -1;
	
	return 0;
}

/*
 *  Routine:  diskWriteReal
 *
 *  Description: writes sectors to the disk indicated by the unit and starts
 *				 at track and the first sector.  The driver must handle a range
 *				 of sectors specified by first and sectors that spans a track
 *				 boundary.  A file cannot wrap around the end of the disk.
 *
 *  Arguments: unit -- disk that is indicated
 *			   track -- track on the disk
 *			   first -- the first sector of the disk
 *			   sectors -- number of sectors
 *			   buffer -- to be written into
 *
 *  Return: -1 if there are invalid parameters, 0 if sectors read successfully, >0 status register
 *  side effect: none
*/
int diskWriteReal(int unit, int track, int first, int sectors, void* buffer){
	
	if(sectors < first)
		return -1;
	
	return 0;
}

/*
 *  Routine:  diskSizeReal
 *
 *  Description: Returns information about the size of the disk.
 *				 
 *
 *  Arguments: unit -- disk that is indicated
 *			   sector -- filled in with the number of bytes in a sector
 *			   track -- number of sectors in a track
 *			   disk -- number of sectors
 * 
 *  Return: -1 if there are invalid parameters, 0 if disk size parameters read successfully
 *  side effect: none
*/
int diskSizeReal(int unit, int *sector, int *track, int *disk){
	return 0;
}
/*********		DISK DRIVER FUNCTIONS		*********/


/*********		TERMINAL DRIVER FUNCTIONS		*********/

int termReadReal(int unit, int size, char *buffer){
	int charsRead = 0;
	return charsRead;
}

/*********		TERMINAL DRIVER FUNCTIONS		*********/



/*
 *  Routine:  checkKernel
 *
 *  Description: check kernel mode, halt if not in kernel mode
 *
 *  Arguments: char *name   -- the invoking method
 *
 *  Return: None
 *  side effect: simulator will halt if not in kernel mode
*/
void checkKernel(char *name){
    int byte = USLOSS_PSR_CURRENT_MODE & USLOSS_PsrGet();
    if(DEBUG3 && debugKernel){
        USLOSS_Console("checkKernelMode: from %s byte: %d\n", name, byte);
    }
    if(byte != 1){
        if(DEBUG3 && debugKernel){
            USLOSS_Console("%s: not in kernel mode\n", name);
        }
        USLOSS_Halt(1);
    }
}
